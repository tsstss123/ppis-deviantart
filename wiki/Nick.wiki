#summary Nick's research log

= Logbook =

== 12/06/2010 ==

Asked myself the question: *What is the final output of our system*:
   * Overall [best/avg] performance of each [deviantART] *category*
   * Overall [best/avg] performance of each *feature (statistical/cognitive)*
   * Overall [best/avg] performance of each *classifier*

   * Performance of each feature given a category
   * Performance of each classifier given a category
     http://www.nickd.nl/dl/ai/is/sketch.png


== 11/06/2010 ==
  * Meeting with Albert.
  * Gave a Processing tutorial.
  * Made the header dynamic: buttons instead of 1 static image.
  * Added switching between views.
  * Added application (zip) to the downloads. Extract the zip to your Eclipse working space. It should run out of the box.

== 10/06/2010 ==
   * Changing drawing images in the footer to label, to make the images clickable. Having a lot of issues with Java Swing.
   * Implemented custom mouse listener class for the Footer, that enables me to pass an additional argument for listener call (image that has been clicked).
   * Fixed the alignment problem in the footer: use the FlowLayout manager and pass the FlowLayout.LEFT_ALIGNMENT argument.
   * It's beter to use setPreferredSize() instead setMaximumSize()
   * Finished first working version of the Scatter view.
   * Preparing slides for the Processing tutorial.
     http://www.nickd.nl/dl/ai/is/parallel_coordinates_v0.35.png

== 09/06/2010 ==
  * Added column (feature) hiding.
  * Added new class "View" which is the parent for all the View (plot) classes. The "View" class contains base functions for loading TSV/CSV data.
  * Reorganizes app structure > Box to JPanel, JPanel supports (re)painting.
  * Now displaying the thumbnails of selected images. Create script to show fullsize in a popup window.
     http://www.nickd.nl/dl/ai/is/parallel_coordinates_v0.3.png

== 08/06/2010 ==
  * Improved the "Parallel coordinates" plot:
    * Added axis + title + min/max value
    * Added highlighting of single image (left click) and whole class (center click)
    * Tested it on Quangs dataset containing 3 features: HSV
    * New design:
     http://www.nickd.nl/dl/ai/is/parallel_coordinates_v0.2.png

== 07/06/2010 ==
  * Finished chapter 8.
  * Decided to kickoff with the "Parallel coordinates" visualization method. Parallel coordinates is a common way of visualizing high-dimensional geometry and analyzing multivariate data. This methods enables us to compare how different features react on different galleries/images.
  * Finished reading the book. Last chapter described how to integrate a Processing PApplet into a Java Swing application.
  * Created first version of the parallel coordinates vis: http://www.nickd.nl/dl/ai/is/parallel_coordinates_v0.1.png

== 06/06/2010 ==
  * Continue reading the book. "A *thread* provides a way to bundle a function in your program so that it can run at the same time as another part of the program. In this case, rather than waiting for the data to download, a thread can be used for the download while the main draw() method of the program continues to run."
  * No changes in data/view: skip the draw() loop by using noLoop() to make the app less CPU demanding.
  * Read the first 245 pages.



== 04/06/2010 ==
  * Discussed our research questions and ways to validate the results of the system.
  * Updated the project details.
  * Continue reading the book. "The translate() method moves the coordinate system over slightly, giving us a white border: (0, 0) will now be (30, 30), so nothing will be drawn in the left or top 30 pixels of the image"
  * Finished chapter 5. Was not interesting at all for our application. Preprocessing data will be done outside the visualization app.
  * Read the first 192 pages.

== 03/06/2010 ==
  * Started reading the "Visualizing Data" book. Why Processing: "Processing was the right combination of cost, ease of use, and execution speed."
  * Read the first 108 pages of the book. Chapter 3 describes how to make a timeSerie (plot) using Processing.

== 02/06/2010 ==
  * Group discussion to divide the work
  * Installed processing using a Mac .dmg.
  * Installed Eclipse. Added a new project with the Processing lib. Now i'm able to program processing application in Eclipse SDK.
  * Explored a couple visualization frameworks/websites:
     * http://blog.blprnt.com/blog/blprnt/your-random-numbers-getting-started-with-processing-and-data-visualization
    * http://prefuse.org/gallery/
    * http://www.wikiviz.org/wiki/Tools
  * Downloaded the JAR and source code of Mondrian. Can't compile the source code, but JAR runs.
  * Downloaded Prefuse. ~~I think this toolkit is more appropriate for our project then Processing.~~ I contains several plot functions.
  * Browsed the internet for Processing examples. It is very powerful and offers many features. The drawback is that we need to script more stuff manually, but this enables us to customize is the way we want.
  * Found an interesting book about Processing: "Visualizing Data". Ordered it and going to read it.